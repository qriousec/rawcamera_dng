typedef struct nikon_camera_context {
    void* vtable;
    char padding[16];
    raw_camera* camera_ptr;
    char padding2[12];
    int width;
    int height;
    int padding3[20];
    int camera_parameter_1;
    int camera_parameter_2;
    char padding4[148];
    int camera_parameter_3;
    int camera_parameter_4;
} nikon_camera_context;

typedef struct huffman_decoder_context {
    void* data_ptr;
    char padding[8];
    void* memory_ptr;
    int memory_size;
    char padding2[520];
    int decoder_param_1;
    int decoder_param_2;
    int decoder_param_3;
    void* decoder_buffer_1;
    void* decoder_buffer_2;
    int width;
    int thread_count;
    int block_width;
    int block_height;
    int current_line;
    int atomic_counter;
    char stop_flag;
    char error_flag;
    char single_threaded;
    char padding3[5];
    void* huffman_table_1;
    void* huffman_table_2;
    void* line_buffer;
    int total_width;
    int stride;
    int total_pixels;
    int max_blocks_per_line;
    void* decode_line_func;
    void* process_block_func;
    long current_row_index;
    long total_rows;
    long row_offset_1;
    long row_offset_2;
    long buffer_mask;
    long buffer_size;
    long buffer_end;
    void* semaphore_1;
    int semaphore_counter_1;
    void* semaphore_2;
    long semaphore_state;
    void* current_data_ptr;
    int bits_available;
    long bit_buffer;
    int padding4[4];
    void* data_start;
    int current_block;
    int color_filter_1;
    int color_filter_2;
    int color_filter_3;
    int color_filter_4;
    char padding5[304];
    int bit_count;
    int bit_shift;
    void* aligned_buffer;
    int thread_flags_1;
    int thread_flags_2;
    int thread_flags_3;
    int thread_flags_4;
    int active_threads;
    int completed_threads;
    void* thread_semaphore;
    char thread_finished;
    char padding6[7];
    void* completion_semaphore;
} huffman_decoder_context;

typedef struct image_processing_block {
    void* callback_ptr;
    void* callback_data;
    nikon_camera_context* context;
} image_processing_block;

